package com.cst438.controller;
import com.cst438.domain.Enrollment;
import com.cst438.domain.*;
import com.cst438.dto.EnrollmentDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;


import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController

@CrossOrigin(origins = "http://localhost:3000")
public class StudentController {

    @Autowired
    CourseRepository courseRepository;

    @Autowired
    SectionRepository sectionRepository;

    @Autowired
    TermRepository termRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    EnrollmentRepository enrollmentRepository;



    // student gets transcript showing list of all enrollments
    // studentId will be temporary until Login security is implemented
    //example URL  /transcript?studentId=19803
    @GetMapping("/transcripts")
    public List<EnrollmentDTO> getTranscript(@RequestParam("studentId") int studentId) {


        // list course_id, sec_id, title, credit, grade in chronological order
        // user must be a student
        // hint: use enrollment repository method findEnrollmentByStudentIdOrderByTermId
        // remove the following line when done
        List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsByStudentIdOrderByTermId(studentId);
        if (enrollments.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No enrollments found for student ID " + studentId);
        }

        return enrollments.stream()
                .map(enrollment -> new EnrollmentDTO(
                        enrollment.getEnrollmentId(),
                        enrollment.getFinalGrade(),
                        enrollment.getStudent().getId(),
                        enrollment.getStudent().getName(),
                        enrollment.getStudent().getEmail(),
                        enrollment.getSection().getCourse().getCourseId(),
                        enrollment.getSection().getCourse().getTitle(),
                        enrollment.getSection().getSectionNo(),
                        enrollment.getSection().getSecId(),
                        enrollment.getSection().getBuilding(),
                        enrollment.getSection().getRoom(),
                        enrollment.getSection().getTimes(),
                        enrollment.getSection().getCourse().getCredits(),
                        enrollment.getSection().getTerm().getYear(),
                        enrollment.getSection().getTerm().getSemester()
                ))
                .collect(Collectors.toList());
    }



    // student gets a list of their enrollments for the given year, semester
    // user must be student
    // studentId will be temporary until Login security is implemented
    @GetMapping("/enrollments")
    public List<EnrollmentDTO> getSchedule(
            @RequestParam("year") int year,
            @RequestParam("semester") String semester,
            @RequestParam("studentId") int studentId) {

        // Retrieve enrollments from repository
        List<Enrollment> enrollment = enrollmentRepository.findByYearAndSemesterOrderByCourseId(year, semester, studentId);
        List<EnrollmentDTO> enrollmentDTO_List = new ArrayList<>();
        // Map enrollments to EnrollmentDTO
        for(Enrollment e: enrollment){
            enrollmentDTO_List.add(new EnrollmentDTO( e.getEnrollmentId(),
                    e.getFinalGrade(),
                    e.getStudent().getId(),
                    e.getStudent().getName(),
                    e.getStudent().getEmail(),
                    e.getSection().getCourse().getCourseId(),
                    e.getSection().getCourse().getTitle(),
                    e.getSection().getSecId(),
                    e.getSection().getSectionNo(),
                    e.getSection().getBuilding(),
                    e.getSection().getRoom(),
                    e.getSection().getTimes(),
                    e.getSection().getCourse().getCredits(),
                    e.getSection().getTerm().getYear(),
                    e.getSection().getTerm().getSemester()
            ));

        }
        return enrollmentDTO_List;

    }


    // student adds enrollment into a section
    // user must be student
    // return EnrollmentDTO with enrollmentId generated by database
    @PostMapping("/enrollments/sections/{sectionNo}")
    public EnrollmentDTO addCourse(
            @PathVariable int sectionNo,
            @RequestParam("studentId") int studentId) {

        // Check that the Section entity with primary key sectionNo exists
        Section section = sectionRepository.findById(sectionNo)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Section not found with sectionNo: " + sectionNo));

        // Check that today is between addDate and addDeadline for the section
        LocalDate today = LocalDate.now();
        if (today.isBefore(section.getAddDate()) || today.isAfter(section.getAddDeadline())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cannot enroll. Enrollment period is closed for section: " + sectionNo);
        }

        // Check that student is not already enrolled into this section
        User student = userRepository.findById(studentId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found with studentId: " + studentId));

        boolean isEnrolled = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(sectionNo, studentId) != null;
        if (isEnrolled) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Student already enrolled in section: " + sectionNo);
        }

        // Create a new enrollment entity and save
        Enrollment enrollment = new Enrollment();
        enrollment.setSection(section);
        enrollment.setStudent(student);
        enrollmentRepository.save(enrollment);

        // Construct and return the EnrollmentDTO
        return new EnrollmentDTO(
                enrollment.getEnrollmentId(),
                null,  // Grade will be null until instructor enters final grades
                studentId,
                student.getName(),
                student.getEmail(),
                section.getCourse().getCourseId(),
                section.getCourse().getTitle(),
                section.getSectionNo(),
                section.getSecId(),
                section.getBuilding(),
                section.getRoom(),
                section.getTimes(),
                section.getCourse().getCredits(),
                section.getTerm().getYear(),
                section.getTerm().getSemester()
        );
    }



    // student drops a course
    // user must be student

    @DeleteMapping("/enrollments/{enrollmentId}")
    public void dropCourse(@PathVariable("enrollmentId") int enrollmentId) {
        Enrollment e = enrollmentRepository.findById(enrollmentId).orElse(null);
        if (e != null) {
            enrollmentRepository.delete(e);
        }
    }
}
